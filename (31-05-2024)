//C program to implement recursive Tower of hanoi 
#include<stdio.h>
void toh(int,char,char,char);

int main(){
    int n;
    printf("Enter the number of disks:");
    scanf("%d",&n);
    toh(n,'A','B','T');
    return 0;
}

void toh(int n,char s,char d,char t){
    if(n==1){
        printf("\n%d disk moved from %c source to destination %c",n,s,d);
        return;
    }
    toh(n-1,s,t,d);
    printf("\n%d disk moved from %c source to destination %c",n,s,d);
    toh(n-1,t,d,s);
}

OUTPUT:
Enter the number of disks:2

1 disk moved from A source to destination T
2 disk moved from A source to destination B
1 disk moved from T source to destination B

//C program to find GCD of two numbers
#include <stdio.h>
int gcd(int,int);
int main()
{
    int a,b,ans;
    printf("Enter the values for integer a and b:");
    scanf("%d %d", &a , &b);
    ans=gcd( a, b);
    printf("\nGCD of %d and %d is %d",a,b,ans);

    return 0;
}

int gcd(int a,int b){
    if ( b == 0){
        return a;
    }
    return gcd(b,a%b);
}

OUTPUT:
Enter the values for integer a and b:10 5
GCD of 10 and 5 is 5

//C program to implement lomuto partition
#include <stdio.h>

void swap(int*,int*);
int lomutoPartitiontion(int [],int,int);
int quickSelect(int [],int,int,int);
int main()
{
    int a[10],l,r,n,i,res;
    printf("Enter the size:"); 
    scanf("%d",&n);
    printf("\nEnter the array elements:");
    for(i=0;i<n;i++){
        scanf("%d",&a[i]);
    }                                         
    res=quickSelect(a,0,n-1,n/2);
    printf("Median is %d",res);
    return 0;
}

void swap(int *a, int *b){
    int temp=*a;
    *a=*b;
    *b=temp;
}

int lomutoPartition(int a[],int l,int r){
    int p,s,i;
    p=a[l];
    s=l;
    for(i=l+1;i<r;i++){
        if(a[i]<p){
            s=s+1;
            swap(&a[s],&a[i]);
        }
    }
    swap(&a[s],&a[l]);
    return s;
}

int quickSelect(int a[],int l,int r,int k){
    int s=lomutoPartition(a,l,r);
    if(s==k){
        return a[s];
    }else if(s<k){
        quickSelect(a,s+1,r,k);
    }else{
        quickSelect(a,l,s-1,k);
    }
}

OUTPUT:
Enter the size:9
Enter the array elements:4 1 10 8 7 12 9 2 15
Median is 8

//C program to implement topological sort using DFS
#include <stdio.h>

int n, a[10][10], res[10], s[10], top = 0;

void dfs(int, int, int[][10]);
void dfs_top(int, int[][10]);

int main()
{
    printf("Enter the no. of nodes");
    scanf("%d", &n);

    int i, j;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &a[i][j]);
        }
    }

    dfs_top(n, a);
    printf("Solution: ");
    for (i = n - 1; i >= 0; i--) {
        printf("%d ", res[i]);
    }
    return 0;
}

void dfs_top(int n, int a[][10]) {
    int i;
    for (i = 0; i < n; i++) {
        s[i] = 0;
    }
    for (i = 0; i < n; i++) {
        if (s[i] == 0) {
            dfs(i, n, a);
        }
    }
}

void dfs(int j, int n, int a[][10]) {
    s[j] = 1;
    int i;
    for (i = 0; i < n; i++) {
        if (a[j][i] == 1 && s[i] == 0) {
            dfs(i, n, a);
        }
    }
    res[top++] = j;
}

OUTPUT:
Enter the no. of nodes6
0 0 1 1 0 0
0 0 0 1 1 0
0 0 0 1 0 1
0 0 0 0 0 1
0 0 0 0 0 1
0 0 0 0 0 0
Solution: 1 4 0 2 3 5

//C program to implement topological sort using source removal method
#include<stdio.h>
int a[10][10],n,t[10],indegree[10];
int stack[10],top=-1;

void computeIndegree(int,int [][10]);
void tps_SourceRemoval(int,int [][10]);

int main(){
    printf("Enter the no. of nodes: ");
    scanf("%d",&n);
    int i,j;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            scanf("%d",&a[i][j]);
        }
    }
    computeIndegree(n,a);
    tps_SourceRemoval(n,a);
    printf("Solution:");
    for(i=0;i<n;i++){
        printf("%d ",t[i]);
    }
    return 0;
}

void computeIndegree(int n,int a[][10]){
    int i,j,sum=0;
    for(i=0;i<n;i++){
        sum=0;
        for(j=0;j<n;j++){
            sum=sum+a[j][i];
        }
        indegree[i]=sum;
    }
}

void tps_SourceRemoval(int n,int a[][10]){
    int i,j,v;
    for(i=0;i<n;i++){
        if(indegree[i]==0){
            stack[++top]=i;
        }
    }
    int k=0;
    while(top!=-1){
        v=stack[top--];
        t[k++]=v;
        for(i=0;i<n;i++){
            if(a[v][i]!=0){
                indegree[i]=indegree[i]-1;
                if(indegree[i]==0){
                    stack[++top]=i;
                }
            }
        }
    }
}

OUTPUT:
Enter the no. of nodes: 5
0 0 1 0 0
1 0 0 1 0
0 0 0 0 1
0 0 1 0 1
0 0 0 0 0
Solution:1 3 0 2 4 
